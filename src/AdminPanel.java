
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class AdminPanel extends javax.swing.JFrame {

    private DefaultTableModel jtModel;
    String columnNames[] = {"Product ID","Name","Price","Colour","Raw Material","Brand","Type","Quality","Quantity"};

    /**
     * Creates new form AdminPanel
     */
    public AdminPanel() {
        Object paint[][] = {};
        jtModel = new DefaultTableModel(paint,columnNames)
        {
            @Override
            public boolean isCellEditable(int row, int column) {
               return false;
            }            
            @Override
            public Class getColumnClass(int column) {
                switch (column) {
                    case 2:
                        /* This is for the price column sorting */
                        return Integer.class;
                    default:
                        return String.class;//This is for the name column sorting.
                }
            }
          
        };
        initComponents();
        jt.getTableHeader().setResizingAllowed(false);
        jt.getTableHeader().setReorderingAllowed(false);
        
        TableRowSorter<TableModel> sorting = new TableRowSorter<>(jt.getModel());
        jt.setRowSorter(sorting); 
        
        // These column can't be sorted.
        sorting.setSortable(0, false);
        sorting.setSortable(3, false);
        sorting.setSortable(4, false);
        sorting.setSortable(5, false);
        sorting.setSortable(6, false);
        sorting.setSortable(7, false);
        sorting.setSortable(8, false);
        addFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        bg = new javax.swing.ButtonGroup();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        framePanel = new javax.swing.JPanel();
        inputPanel = new javax.swing.JPanel();
        tfName = new javax.swing.JTextField();
        tfPaintId = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        tfQuantity = new javax.swing.JTextField();
        bCombo = new javax.swing.JComboBox<>();
        paintID1 = new javax.swing.JLabel();
        name1 = new javax.swing.JLabel();
        color1 = new javax.swing.JLabel();
        brand1 = new javax.swing.JLabel();
        price1 = new javax.swing.JLabel();
        typeCombo = new javax.swing.JComboBox<>();
        type1 = new javax.swing.JLabel();
        rwCombo = new javax.swing.JComboBox<>();
        rw = new javax.swing.JLabel();
        medium = new javax.swing.JRadioButton();
        high = new javax.swing.JRadioButton();
        mild = new javax.swing.JRadioButton();
        quality1 = new javax.swing.JLabel();
        tfColor = new javax.swing.JTextField();
        tfPrice = new javax.swing.JTextField();
        quantity1 = new javax.swing.JLabel();
        detailPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt = new javax.swing.JTable();
        searchPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        searchValueTF = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        searchCombo = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        save = new javax.swing.JMenuItem();
        custPanel = new javax.swing.JMenuItem();
        btnExit = new javax.swing.JMenuItem();
        about = new javax.swing.JMenu();
        subAbout = new javax.swing.JMenuItem();
        help = new javax.swing.JMenuItem();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        jMenuItem3.setText("jMenuItem3");

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hyolmo Paint Store");
        setName("jFrameAdmin"); // NOI18N
        setResizable(false);

        framePanel.setBackground(new java.awt.Color(223, 238, 253));

        inputPanel.setBackground(new java.awt.Color(252, 252, 252));
        inputPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        bCombo.setForeground(new java.awt.Color(51, 51, 255));
        bCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Asian Paint", "Kensai Nerolac", "Pashupati Paint", "Apollo Paint" }));

        paintID1.setText("Paint ID:");

        name1.setText("Name");

        color1.setText("Color");

        brand1.setText("Brand");

        price1.setText("Price");

        typeCombo.setForeground(new java.awt.Color(0, 0, 255));
        typeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Wall Paint", "House Paint", "Spray Paint", "Auto Mobiles" }));

        type1.setText("Type");

        rwCombo.setForeground(new java.awt.Color(0, 51, 255));
        rwCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Epoxy", "Calcium", "Acrylic" }));

        rw.setText("Raw Material");

        bg.add(medium);
        medium.setText("Medium");

        bg.add(high);
        high.setText("High");

        bg.add(mild);
        mild.setText("Mild");

        quality1.setText("Quality");

        quantity1.setText("Quantity");

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(name1)
                                    .addComponent(paintID1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(49, 49, 49)
                                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfPaintId, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                                    .addComponent(tfName)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                                .addComponent(rw)
                                .addGap(42, 42, 42)
                                .addComponent(rwCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(brand1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(price1)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(color1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(bCombo, 0, 215, Short.MAX_VALUE)
                            .addComponent(tfColor)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)))
                .addGap(30, 30, 30)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(type1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quality1)
                    .addComponent(quantity1))
                .addGap(39, 39, 39)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, inputPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(high)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(medium)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mild, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(typeCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfQuantity))
                .addGap(29, 29, 29))
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(typeCombo)
                    .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(brand1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tfPaintId, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(type1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(paintID1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(price1)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(color1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rwCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rw, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfColor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantity1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(medium)
                                .addComponent(mild)
                                .addComponent(high))
                            .addComponent(quality1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(48, 48, 48))
        );

        detailPanel.setBackground(new java.awt.Color(255, 255, 255));
        detailPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("Details:");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setText("Update");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        jt.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jt.setForeground(new java.awt.Color(0, 0, 255));
        jt.setModel(jtModel);
        jt.setGridColor(new java.awt.Color(0, 0, 0));
        jt.setRowHeight(30);
        jt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jt);

        javax.swing.GroupLayout detailPanelLayout = new javax.swing.GroupLayout(detailPanel);
        detailPanel.setLayout(detailPanelLayout);
        detailPanelLayout.setHorizontalGroup(
            detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(detailPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 680, Short.MAX_VALUE)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        detailPanelLayout.setVerticalGroup(
            detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        searchPanel.setBackground(new java.awt.Color(255, 255, 255));
        searchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Find By Name/Brand:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        searchCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Product ID", "Price", "Brand" }));

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel9)
                .addGap(50, 50, 50)
                .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(searchValueTF, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchValueTF, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchCombo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout framePanelLayout = new javax.swing.GroupLayout(framePanel);
        framePanel.setLayout(framePanelLayout);
        framePanelLayout.setHorizontalGroup(
            framePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(framePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(framePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(detailPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        framePanelLayout.setVerticalGroup(
            framePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(framePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(detailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        jMenuBar1.setBorder(null);
        jMenuBar1.setName(""); // NOI18N

        jMenu1.setText("File");

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);

        custPanel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        custPanel.setText("Customer Panel");
        custPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custPanelActionPerformed(evt);
            }
        });
        jMenu1.add(custPanel);

        btnExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        jMenu1.add(btnExit);

        jMenuBar1.add(jMenu1);

        about.setText("          About");

        subAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        subAbout.setText("About ");
        subAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subAboutActionPerformed(evt);
            }
        });
        about.add(subAbout);

        help.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        help.setText("Help");
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });
        about.add(help);

        jMenuBar1.add(about);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(framePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(framePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //to add in JTable
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        add();
    }//GEN-LAST:event_addActionPerformed
    //To clear
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
       toClear();
    }//GEN-LAST:event_clearActionPerformed
    //to Select a particular item
    private void jtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtMouseClicked
       selectDetailWithMouse();
    }//GEN-LAST:event_jtMouseClicked

   //to delete index
   public void toDeletIndex()
    {
            try
            {   
                //DefaultTableModel model=(DefaultTableModel)jt.getModel();            
                //jt.getModel();
                int  num=Integer.parseInt(JOptionPane.showInputDialog(rootPane,"Enter the row number"));                
                jtModel.removeRow(num-1);
                JOptionPane.showMessageDialog(rootPane,"Successfully deleted selected row number " +num);
            }
            catch(NumberFormatException ex)
            {
                JOptionPane.showMessageDialog(rootPane,"Enter integer not alphabet");
            } 
            catch(ArrayIndexOutOfBoundsException ex)
            {
                JOptionPane.showMessageDialog(rootPane,"This row dosent exist");
            }
    }
    //To delete
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
       toDelete();
    }//GEN-LAST:event_btnDeleteActionPerformed
    //To edit
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
    
        toEdit();
        
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchFor(getSearchIndex(), searchValueTF.getText());
    }//GEN-LAST:event_btnSearchActionPerformed

    private void subAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subAboutActionPerformed
        popAbout();       
    }//GEN-LAST:event_subAboutActionPerformed

    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
        popHelp();
    }//GEN-LAST:event_helpActionPerformed

    private void custPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custPanelActionPerformed
        backToCustomer();
    }//GEN-LAST:event_custPanelActionPerformed

   //To save the file
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        toSave();
    }//GEN-LAST:event_saveActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        toExit();
    }//GEN-LAST:event_btnExitActionPerformed
    //It will count the row of JTable
     public int toCount()
    {
        int count=jt.getRowCount();
        return count;
    }
    //to add quality details which will return the value
    private String getQuality()
    {
     
        if(high.isSelected())
        {
            return "High";
        }
        else if(medium.isSelected())
        {
            return "Medium";
        }
        else if(mild.isSelected())
        {
            return "Mild";
        }
        else
        {
            
            return null;
        }
    }
    //It will clear all the Textfiled
    private void toClear()
    {
        tfPaintId.setText("");
        tfName.setText("");
        tfPrice.setText("");
        tfColor.setText("");
        rwCombo.setSelectedIndex(0);
        bCombo.setSelectedIndex(0);
        typeCombo.setSelectedIndex(0);
        tfQuantity.setText("");
        bg.clearSelection();
        
    }
    // This function will add detials in JTable
    private void add()
    {
        //"Product ID","Name","Price","Colour","RawMaterial","Brand","Type","Quality","Quantity"
        String paintId,name,colour,rawMaterial,brand,type,quality;
        int quantity,price;
        
        if(tfPaintId.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane,"Please! Enter the Paint ID");
        }
        else if(tfName.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane,"Please! Enter the Product name");
        }
        else if(rwCombo.getSelectedItem().toString().equals("Select"))
        {
            JOptionPane.showMessageDialog(rootPane,"Please! Select the raw materials used");
        }
          else if(bCombo.getSelectedItem().toString().equals("Select"))
        {
            JOptionPane.showMessageDialog(rootPane,"Please! select the brand you want");
        }
        else if(tfPrice.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane,"Please! Enter the price");
        }
        else if(tfColor.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane,"Please! Enter the colour");
        }
        else if(typeCombo.getSelectedItem().toString().equals("Select"))
        {
            JOptionPane.showMessageDialog(rootPane,"Select something from paint type");
        }
        else if(getQuality()==null) 
        {
            JOptionPane.showMessageDialog(rootPane,"Quality is not selected");
        }
         else if(tfQuantity.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane,"Please! Enter the quantity");
        }
        else
        {
            try
            {
            paintId = tfPaintId.getText();
            name=tfName.getText();
            price=Integer.valueOf(tfPrice.getText());
            colour=tfColor.getText();
            rawMaterial=rwCombo.getSelectedItem().toString();
            brand=bCombo.getSelectedItem().toString();
            type=typeCombo.getSelectedItem().toString();
            quality=getQuality();
            quantity=Integer.valueOf(tfQuantity.getText());
            boolean exist=false;
                for (int i=0; i<toCount(); i++) 
                    {    
                        if(jtModel.getValueAt(i,0).equals(paintId))
                            {
                                exist = true;
                                 break;
                            }
                        else
                            {
                            }
                    }       
                if(!exist)
                    {
                        jtModel.addRow(new Object[]{paintId,name,price,colour,rawMaterial,brand,type,quality,quantity});
                        JOptionPane.showMessageDialog(rootPane,"Paint detail successfully added");
                        toClear();
                    }
                else
                    {
                        JOptionPane.showMessageDialog(rootPane,"Paint ID should be unique.");
                    }
            
            }
            catch(NumberFormatException ex)
            {
                JOptionPane.showMessageDialog(rootPane, "Expected Integer but entered other character at price or quantity.");
            }
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu about;
    private javax.swing.JButton add;
    private javax.swing.JComboBox<String> bCombo;
    private javax.swing.ButtonGroup bg;
    private javax.swing.JLabel brand1;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JMenuItem btnExit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton clear;
    private javax.swing.JLabel color1;
    private javax.swing.JMenuItem custPanel;
    private javax.swing.JPanel detailPanel;
    private javax.swing.JPanel framePanel;
    private javax.swing.JMenuItem help;
    private javax.swing.JRadioButton high;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jt;
    private javax.swing.JRadioButton medium;
    private javax.swing.JRadioButton mild;
    private javax.swing.JLabel name1;
    private javax.swing.JLabel paintID1;
    private javax.swing.JLabel price1;
    private javax.swing.JLabel quality1;
    private javax.swing.JLabel quantity1;
    private javax.swing.JLabel rw;
    private javax.swing.JComboBox<String> rwCombo;
    private javax.swing.JMenuItem save;
    private javax.swing.JComboBox<String> searchCombo;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchValueTF;
    private javax.swing.JMenuItem subAbout;
    private javax.swing.JTextField tfColor;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfPaintId;
    private javax.swing.JTextField tfPrice;
    private javax.swing.JTextField tfQuantity;
    private javax.swing.JLabel type1;
    private javax.swing.JComboBox<String> typeCombo;
    // End of variables declaration//GEN-END:variables
   
    
//Display the .txt file in JTable 
    public void addFile() 
    {
        try {
            //JFileChooser jf=new JFileChooser();
            //jf.showOpenDialog(null);
           // String fp=jf.getSelectedFile().getAbsolutePath();
            File file2=new File("trial.txt");
            BufferedReader br=new BufferedReader(new FileReader (file2));
            Object[] tableLines=br.lines().toArray();
            for (Object tableLine : tableLines) {
                String line = tableLine.toString().trim();
                String[] dataRow=line.split(",");
                jtModel.addRow(dataRow);
                jtModel.setValueAt(Integer.valueOf(dataRow[2]), jtModel.getRowCount()-1, 2);
            }
            br.close();
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(rootPane,"Nothing was selected");
        }
    }
    // This method will close the program.
    public void toExit() {
         int sure=JOptionPane.showConfirmDialog(rootPane,"Are you sure to Exit?");
        if(sure==JOptionPane.YES_OPTION)
        {           
            System.exit(0);
        }      
    }
    //This method will take back to customer Panel.
    private void backToCustomer() {
        new CustomerPanel().setVisible(true);
       this.setVisible(false);
    }
    //This method will write back to that .txt file.
    private void toSave() {
        File file4=new File("trial.txt");
        try
        {
            String row;
            BufferedWriter bw=new BufferedWriter(new FileWriter(file4));
            for(int i=0;i<jt.getRowCount();i++)
            {
                row = "";
                for(int j=0;j<jt.getColumnCount();j++)
                {
                    row += (jt.getValueAt(i, j) +",");
                }
                row = row.substring(0, row.length()-1);
                //System.out.println(row);
                bw.write(row);
                bw.newLine();
            }
            bw.close();
           
            
        JOptionPane.showMessageDialog(rootPane,"Details saved succesfully");
        }
        
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(rootPane,"Exception occured");
        }
    }
    //This method will delete the row
    private void toDelete() {
        if(toCount()==0)
        {
            JOptionPane.showMessageDialog(rootPane,"No paint detail has been currently added");
        }
        else
        {
            String[] choices={"Delete First Row","Delete Last Row","Delete With Index"};
            int option=JOptionPane.showOptionDialog(rootPane, "How would you like to delete data?", "Delete Data", WIDTH, HEIGHT,null , choices, NORMAL);
            if(option==0)
            {
                jtModel.removeRow(toCount()-toCount());
                JOptionPane.showMessageDialog(rootPane,"Successfully deleted first row");
            }
            else if(option==1)
            {
                jtModel.removeRow(toCount()-1);
                JOptionPane.showMessageDialog(rootPane,"Successfully deleted last row");
            }
            else if(option==2)
            {
                toDeletIndex();
            }
            else
            {
                
            }
        }
    }
    //this method will update and delete the particular selected row.
    private void selectDetailWithMouse() {
        int selectedRowIndex=jt.convertRowIndexToModel(jt.getSelectedRow());
        String[] choices={"Update Row","Delete","Cancel"};
            int option=JOptionPane.showOptionDialog(rootPane, "Product ID: "+jtModel.getValueAt(selectedRowIndex, 0).toString()+"\n"+"Product Name: "+jtModel.getValueAt(selectedRowIndex,1), "View Data", WIDTH, HEIGHT,null , choices, NORMAL);
            if(option==0)
            {
                tfPaintId.setText(jtModel.getValueAt(selectedRowIndex,0).toString());
                tfName.setText(jtModel.getValueAt(selectedRowIndex, 1).toString());
                tfPrice.setText(jtModel.getValueAt(selectedRowIndex, 2).toString());
                tfColor.setText(jtModel.getValueAt(selectedRowIndex, 3).toString());
                tfQuantity.setText(jtModel.getValueAt(selectedRowIndex, 8).toString());
                rwCombo.setSelectedItem(jtModel.getValueAt(selectedRowIndex, 4));
                typeCombo.setSelectedItem(jtModel.getValueAt(selectedRowIndex, 6));
                bCombo.setSelectedItem(jtModel.getValueAt(selectedRowIndex, 5));
                switch(jtModel.getValueAt(selectedRowIndex, 7).toString()) {
                    case "High":
                        high.setSelected(true);
                        break;
                    case "Mild":
                        mild.setSelected(true);
                        break;
                    case "Medium":
                        medium.setSelected(true);
                        break;
                }
            }
            else if(option==1)
            {
                jtModel.removeRow(selectedRowIndex);
                JOptionPane.showMessageDialog(rootPane," Detail successfully deleted");
            }
            else 
            {
                
            } 
    }
    //This method will search for the coloumn index from its name.
    private int getSearchIndex() 
    {
        String selected = searchCombo.getSelectedItem().toString();
        for(int i = 0; i<columnNames.length; i++)
            {
                if(selected.equals(columnNames[i]))
                    {
                         return i;
                    }
            }
            return -1;
    }
    //This method will search for the entered value in array.
    private void searchFor(int colIndex, String value) 
        {
            if(colIndex == 2)
                {
                    try
                        {
                            Integer.valueOf(value);
                        } 
                    catch(NumberFormatException e)
                    {
                        JOptionPane.showMessageDialog(null,"Expected integer");
                        return;
                    }
                }
            ArrayList<String[]> jtData = getTableRowData();
            sortBubble(jtData, colIndex);
            int valueIndex = searchBinary(jtData, colIndex, value);
            if (valueIndex == -1)
                {
                    JOptionPane.showMessageDialog(null, "Not found");
                }
            else 
                {
                    displayPaintInfo(jtData.get(valueIndex));
                }
        }
    //Creating and adding data in arraylist
    private ArrayList<String[]> getTableRowData() 
    {
        int numRow, numCol;
        ArrayList<String[]> data = new ArrayList<>();
        numRow = jtModel.getRowCount();        
        numCol = jtModel.getColumnCount();
        String[] row;
        for(int i = 0; i< numRow; i++)
            {
                row = new String[numCol];
                for(int j = 0; j< numCol; j++)
                    {
                        row[j] = jtModel.getValueAt(i, j).toString();
                    } 
                    data.add(row);
            }        
        return data;
    }
    //Sort the array using bubble sorting.
    private void sortBubble(ArrayList<String[]> jtData, int col)
    {
        String first, second;
        for(int i=0; i < jtData.size();i++)
        {
            for(int j=1; j < (jtData.size()-i); j++)
                {
                    first = jtData.get(j-1)[col];
                    second = jtData.get(j)[col];
                    if(col == 2)
                    {
                     // Price is integer
                        int x = Integer.valueOf(first);
                        int y = Integer.valueOf(second);
                        if(x < y)
                        { 
                            Collections.swap(jtData, j, j-1);
                        }
                    }
                    else if (first.compareToIgnoreCase(second) > 0) 
                    {
                    // For Strings
                        Collections.swap(jtData, j, j-1);
                    }
                }
        }
    }
    //BInary search algorithm.
    private int searchBinary(ArrayList<String[]> arr, int col, String value) {
        int l = 0; //THis is for index at left
        int r = arr.size()-1; // this is for index at right.
        int m;
        if(col == 2)
        { //this is for Price
            while(true)
            {
                m = (l+r)/2;
                String mVal = arr.get(m)[col];
                int x,y;
                x = Integer.valueOf(mVal);
                y = Integer.valueOf(value);
                if(x == y)
                    {
                        return m;
                    } 
                else if (l == r)
                    {
                        return -1;
                    }
                else if (y > x)
                    {
                        r = m;
                    } 
                else
                    {
                    if(m == l) 
                        {
                            // It will stop the infinite loop
                            m++;
                        }
                        l = m;
                    }
            }
        }
        else{
            // String value
            while(true)
            {
                m = (l+r)/2;
                String mVal = arr.get(m)[col];
                if(value.compareToIgnoreCase(mVal) == 0)
                {
                    return m;
                }
                else if (l == r)
                {
                    return -1;
                }
                else if (value.compareToIgnoreCase(mVal) < 0)
                {
                    r = m;
                } 
                else
                {
                    if(m == l) 
                    {
                        // Stops infinite loop
                        m++;
                    }
                    l = m;
                }
            }
        }
    }
//{"Product ID","Name","Price","Colour","Raw Material","Brand","Type","Quality","Quantity"};
    private void displayPaintInfo(String[] row) {
        JOptionPane.showMessageDialog(null, "Search Detail \n"+"Product_id: " + row[0]+"\n"+"Product Name: " + row[1]+"\n"+"Price: "+row[2]+"\n"+"Colour: "+row[3]+"\n"+"Raw Material: "+row[4]+"\n"+"Brand: "+row[5]+"\n"+"Type: "+row[6]+"\n"+"Quality: "+row[7]+"\n"+"Quantity: "+row[8]);
        searchValueTF.setText("");
        
    }
    //This method will print the arraylist in console
    private void showArray(ArrayList<String[]> arr) {
        for(String[] row: arr){
            for(String x: row){
                System.out.print(x + "\t\t");
            }
            System.out.println();
        }   
        System.out.println("------------------------------------");
    }
    //This method will update the selected row.
    private void toEdit() {
        int i=jt.getSelectedRow();
        if(toCount()==0)
            {
                JOptionPane.showMessageDialog(rootPane,"No data has been added to the details");
            }
        else if(i==-1)
            {
                JOptionPane.showMessageDialog(rootPane,"No item has been selected for the update");
            }
        else
            {
                if(tfPaintId.getText().isEmpty())
                    {
                        JOptionPane.showMessageDialog(rootPane,"Please! Enter the Paint ID");
                    }
                else if(tfName.getText().isEmpty())
                    {
                        JOptionPane.showMessageDialog(rootPane,"Please! Enter the Product name");
                    }
                else if(rwCombo.getSelectedItem().toString().equals("Select"))
                    {
                        JOptionPane.showMessageDialog(rootPane,"Please! Select the raw materials used");
                    }
                else if(bCombo.getSelectedItem().toString().equals("Select"))
                    {
                        JOptionPane.showMessageDialog(rootPane,"Please! select the brand you want");
                    }
                else if(tfPrice.getText().isEmpty())
                    {
                        JOptionPane.showMessageDialog(rootPane,"Please! Enter the price");
                    }
                else if(tfColor.getText().isEmpty())
                    {
                        JOptionPane.showMessageDialog(rootPane,"Please! Enter the colour");
                    }
                else if(typeCombo.getSelectedItem().toString().equals("Select"))
                    {
                        JOptionPane.showMessageDialog(rootPane,"Select something from paint type");
                    }
                else if(getQuality()==null) 
                    {
                        JOptionPane.showMessageDialog(rootPane,"Quality is not selected");
                    }
                else if(tfQuantity.getText().isEmpty())
                    {
                        JOptionPane.showMessageDialog(rootPane,"Please! Enter the quantity");
                    }
                else
                    {
                        try
                            {
                                jtModel.setValueAt(tfPaintId.getText(),i,0);
                                jtModel.setValueAt(tfName.getText(),i,1);
                                jtModel.setValueAt(Integer.valueOf(tfPrice.getText()),i,2);
                                jtModel.setValueAt(tfColor.getText(),i,3);
                                jtModel.setValueAt(rwCombo.getSelectedItem(),i,4);
                                jtModel.setValueAt(bCombo.getSelectedItem(),i,5);
                                jtModel.setValueAt(typeCombo.getSelectedItem(),i,6);
                                jtModel.setValueAt(getQuality(),i,7);
                                jtModel.setValueAt(Integer.valueOf(tfQuantity.getText()),i,8);
                                JOptionPane.showMessageDialog(rootPane,"Successfully updated the data in details");
                                toClear();
                            }
                        catch(Exception ex)
                                {
                                    JOptionPane.showMessageDialog(rootPane,"Excepted integer but entered another character at price or quantity.");
                                }
                    }
                }
    }
    //this method will open pdf file for about.
    private void popAbout() {
         try {
            //File file=new File(filepath);
            Desktop.getDesktop().open(new java.io.File("about.pdf"));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane,"File not found or supported");
        }
    }
    //this method will open pdf file for Help.
    private void popHelp() {
         try {
            //File file=new File(filepath);
            Desktop.getDesktop().open(new java.io.File("help.pdf"));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane,"File not found or supported");
        }
    }


}

